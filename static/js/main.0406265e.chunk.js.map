{"version":3,"sources":["components/error-banner/error-banner.png","actions/index.js","components/films-service-context/films-service-context.js","components/hoc/with-swapi-service.js","components/loading-indicator/index.js","components/loading-indicator/loading-indicator.js","components/error-banner/index.js","components/error-banner/error-banner.js","components/details-list/entity-link.js","components/details-list/entity-list-item.js","components/details-list/details-list.js","components/details-list/index.js","components/film-list/film-list.js","components/film-list/index.js","components/app/index.js","components/app/app.js","reducers/index.js","store.js","services/swapi-service.js","components/error-boundary/error-boundary.js","components/error-boundary/index.js","index.js"],"names":["module","exports","fetchEntity","service","dispatch","entity","id","type","payload","fetchEntityRequest","getEntity","then","data","fetchEntitySuccess","catch","error","fetchEntityFailure","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withSwapiService","Wrapped","props","swapiService","LoadingIndicator","className","role","ErrorBanner","details","errorDetails","Fragment","src","image","alt","width","EntityLink","text","to","EntityListItem","getDataByParams","getItems","this","items","loading","hasError","Object","values","Component","connect","state","ownProps","entityName","join","entityObj","entities","StringListItem","key_","value","renderEntityListItems","key","renderEntity","keyNameProcess","keyName","toUpperCase","slice","replace","DetailsList","renderItem","map","prevProps","prevState","snapshot","length","processedItems","entries","List","match","params","FilmList","films","film","url","title","episode_id","FilmListContainer","getFilms","compose","fetchAllFilmsSuccess","fetchFilms","App","path","exact","component","filmsInitialState","filmsReducer","action","applyEntityOrCreateNew","entity_key","entitiesReducer","reducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","SwapiService","BASE_URL","getData","a","fetch","response","json","page","entityInUrl","idInUrl","pageInUrl","api_endpoint","answer_data","_resultParser","results","_listItemParser","processed_data","_singleItemParser","fromEntries","processed_value","_processValue","_isLink","test_string","toString","_getTypeAndIdFromURL","ErrorBoundary","errorInfo","setState","errorBanner","children","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0406265e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error-banner.e76c8d59.png\";","export const fetchAllFilmsRequest = () => {\r\n    return {type: \"FETCH_ALL_FILMS_REQUEST\"}\r\n}\r\nexport const fetchAllFilmsFailure = () => {\r\n    return {type: \"FETCH_ALL_FILMS_FAILURE\"}\r\n}\r\nexport const fetchAllFilmsSuccess = (films) => {\r\n    return {\r\n        type: \"FETCH_ALL_FILMS_SUCCESS\",\r\n        payload: films,\r\n    }\r\n}\r\n\r\nexport const fetchFilms = (service, dispatch) => {\r\n    dispatch(fetchAllFilmsRequest());\r\n    service.getEntity(\"films\")\r\n        .then((films) => dispatch(fetchAllFilmsSuccess(films)))\r\n        .catch((error) => dispatch(fetchAllFilmsFailure(error)));\r\n}\r\n\r\nexport const fetchEntityRequest = (entity, id) => {\r\n    return {\r\n        type: \"FETCH_ENTITY_REQUEST\",\r\n        payload: {entity, id}\r\n    }\r\n}\r\nexport const fetchEntitySuccess = (entity, id, data) => {\r\n    return {\r\n        type: \"FETCH_ENTITY_SUCCESS\",\r\n        payload: {entity, id, data}\r\n    }\r\n}\r\n\r\nexport const fetchEntityFailure = (entity, id, error) => {\r\n    return {\r\n        type: \"FETCH_ENTITY_FAILURE\",\r\n        payload: {entity, id, error}\r\n    }\r\n}\r\n\r\nexport const fetchEntity = (service, dispatch, entity, id) => {\r\n    dispatch(fetchEntityRequest(entity, id));\r\n    service.getEntity(entity, {id})\r\n        .then(data => dispatch(fetchEntitySuccess(entity, id, data)))\r\n        .catch(error => dispatch(fetchEntityFailure(entity, id, error)));\r\n}","import React from 'react';\r\n\r\nconst {\r\n    Provider: SwapiServiceProvider,\r\n    Consumer: SwapiServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    SwapiServiceProvider,\r\n    SwapiServiceConsumer,\r\n};","import React from \"react\";\r\nimport {SwapiServiceConsumer} from \"../films-service-context/films-service-context\";\r\n\r\nconst withSwapiService = () => (Wrapped) => {\r\n    return (props) => (\r\n        <SwapiServiceConsumer>\r\n            {\r\n                (swapiService) => <Wrapped {...props} swapiService={swapiService} />\r\n            }\r\n        </SwapiServiceConsumer>\r\n    )\r\n}\r\n\r\nexport default withSwapiService;","import LoadingIndicator from \"./loading-indicator\";\r\nexport default LoadingIndicator;","import React from \"react\";\r\n\r\nconst LoadingIndicator = () => {\r\n    return (\r\n        <div className=\"p-3 text-center\">\r\n            <div className=\"spinner-border text-primary\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingIndicator;","import ErrorBanner from \"./error-banner\";\r\nexport default ErrorBanner;","import React from \"react\";\r\nimport image from \"./error-banner.png\"\r\n\r\nconst ErrorBanner = ({details}) => {\r\n\r\n    const errorDetails = !details ? null : (\r\n        <React.Fragment>\r\n            <hr/>\r\n            <p className=\"mb-0 text-muted\">Error details: {details}</p>\r\n        </React.Fragment>\r\n    )\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 alert alert-danger p-5 my-1 text-center\" role=\"alert\">\r\n                    <img src={image} alt=\"\" width=\"100\" className=\"mb-4\"/>\r\n                    <h4 className=\"alert-heading\">Some error happened!</h4>\r\n                    <p>Oops... Looks like something went wrong.</p>\r\n                    {errorDetails}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ErrorBanner;","import {Link} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst EntityLink = ({entity, id, text}) => {\r\n    return <Link className=\"badge text-white mr-1 badge-primary\" to={\"/\" + entity + \"/\" + id}>{text}</Link>\r\n};\r\n\r\nexport default EntityLink;","import React from \"react\";\r\nimport withSwapiService from \"../hoc/with-swapi-service\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchEntity} from \"../../actions\";\r\nimport EntityLink from \"./entity-link\";\r\n\r\nclass EntityListItem extends React.Component {\r\n    getDataByParams = () => {\r\n        const {getItems} = this.props;\r\n        getItems();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataByParams();\r\n    }\r\n\r\n    render() {\r\n        const {items, loading, hasError} = this.props;\r\n        const {entity, id} = this.props;\r\n        let text = Object.values(items)[0];\r\n\r\n        if (loading) text = \"Loading...\"\r\n        if (hasError) text = \"Error\"\r\n\r\n        return <EntityLink entity={entity} id={id} text={text}/>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const {entity, id} = ownProps;\r\n    const entityName = [entity, id].join(\"_\");\r\n    const entityObj = state.entities[entityName] ? state.entities[entityName] : {};\r\n    const {loading=true, hasError=false, data=[]} = entityObj;\r\n    return {\r\n        loading,\r\n        items: data,\r\n        hasError,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    const {swapiService} = ownProps;\r\n    const {entity, id} = ownProps;\r\n\r\n    return {\r\n        getItems: () => fetchEntity(swapiService, dispatch, entity, id),\r\n    }\r\n}\r\n\r\nexport default withSwapiService()(connect(mapStateToProps, mapDispatchToProps)(EntityListItem))","import React from \"react\";\r\nimport {connect} from \"react-redux\"\r\nimport {fetchEntity} from \"../../actions\";\r\nimport withSwapiService from \"../hoc/with-swapi-service\";\r\nimport LoadingIndicator from \"../loading-indicator\";\r\nimport ErrorBanner from \"../error-banner\";\r\nimport EntityListItem from \"./entity-list-item\";\r\nimport EntityLink from \"./entity-link\";\r\n\r\n\r\nconst StringListItem = ({key_, value}) => {\r\n    return (\r\n        <li className=\"list-group-item\"><strong>{key_}</strong>: {value}</li>\r\n    )\r\n\r\n}\r\n\r\nconst renderEntityListItems = (value) => {\r\n    const {entity, id} = value;\r\n    return <EntityListItem key={id} entity={entity} id={id}/>\r\n}\r\n\r\nconst renderEntity = (value) => {\r\n    const {entity, id} = value;\r\n    return <EntityLink entity={entity} id={id}/>\r\n}\r\n\r\nconst keyNameProcess = (keyName) => {\r\n    keyName = keyName[0].toUpperCase() + keyName.slice(1);\r\n    return keyName.replace(\"_\", \" \")\r\n}\r\n\r\n\r\nclass DetailsList extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.items.length !== prevProps.items.length && this.props.items.length === 0) {\r\n            this.props.getItems();\r\n        }\r\n    }\r\n\r\n    renderItem = ([key, value]) => {\r\n        key = keyNameProcess(key);\r\n\r\n        if (typeof value === 'object'  && value.type !== 'entity') {\r\n            value = (\r\n                <div>\r\n                    {value.map(renderEntityListItems)}\r\n                </div>\r\n            );\r\n        }\r\n        if (typeof value === 'object'  && value.type === 'entity') {\r\n            value = renderEntity(value);\r\n        }\r\n\r\n        return <StringListItem value={value} key={key} key_={key}/>;\r\n    }\r\n\r\n    render() {\r\n        let {items, loading, hasError} = this.props;\r\n\r\n        if (loading) return <LoadingIndicator />;\r\n        if (hasError) return <ErrorBanner/>;\r\n\r\n        const processedItems = Object.entries(items).map(this.renderItem);\r\n\r\n        return (\r\n            <ul className=\"list-group list-group-flush\">\r\n                {processedItems}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const {entity, id} = ownProps.match.params;\r\n    const entityName = [entity, id].join(\"_\");\r\n    const entityObj = state.entities[entityName] ? state.entities[entityName] : {};\r\n    const {loading=true, hasError=false, data=[]} = entityObj;\r\n    return {\r\n        loading,\r\n        items: data,\r\n        hasError,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    const {swapiService} = ownProps;\r\n    const {entity, id} = ownProps.match.params;\r\n\r\n    return {\r\n        getItems: () => fetchEntity(swapiService, dispatch, entity, id),\r\n    }\r\n}\r\n\r\nexport default withSwapiService()(connect(mapStateToProps, mapDispatchToProps)(DetailsList));","import List from \"./details-list\";\r\nexport default List;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport withSwapiService from \"../hoc/with-swapi-service\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchFilms} from \"../../actions\";\r\nimport ErrorBanner from \"../error-banner\";\r\nimport LoadingIndicator from \"../loading-indicator\";\r\nimport {compose} from \"redux\";\r\n\r\nconst FilmList = ({films}) => {\r\n    return (\r\n        <div className=\"list-group\">\r\n            {\r\n                films.map(film => {\r\n                    const {id} = film.url;\r\n                    const url = \"/films/\" + id;\r\n                    return <Link to={url}\r\n                                 className=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\">{film.title}\r\n                        <span className=\"badge badge-primary badge-pill\">Episode: {film.episode_id}</span>\r\n                    </Link>;\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nclass FilmListContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const {getFilms, films} = this.props;\r\n        if (!films.data.length) getFilms();\r\n    }\r\n\r\n    render() {\r\n        const {loading, data, hasError} = this.props.films;\r\n\r\n        if (hasError) return <ErrorBanner details=\"Film load failure\"/>;\r\n        if (loading) return <LoadingIndicator/>;\r\n\r\n        return <FilmList films={data}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({films}) => {\r\n    return {\r\n        films,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    const {swapiService} = ownProps;\r\n\r\n    return {\r\n        getFilms: () => fetchFilms(swapiService, dispatch)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withSwapiService(),\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)((FilmListContainer));","import FilmList from \"./film-list\";\r\nexport default FilmList;","import App from \"./app\";\r\nexport default App;","import React from \"react\";\r\nimport {BrowserRouter as Router, Link, Route} from 'react-router-dom';\r\nimport DetailsList from \"../details-list\";\r\nimport FilmList from \"../film-list\";\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <h1 className=\"text-center py-5\"><Link to=\"/\">Swapi GUI</Link></h1>\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-md-9 col-lg-5\">\r\n                            <Route path=\"/\" exact>\r\n                                <h1 className=\"text-center\">Films</h1>\r\n                                <FilmList/>\r\n                            </Route>\r\n                            <Route path=\"/:entity/:id\" component={DetailsList}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const filmsInitialState = {\r\n    loading: true,\r\n    hasError: false,\r\n    data: []\r\n}\r\n\r\nconst filmsReducer = (state = filmsInitialState, action) => {\r\n    switch (action.type) {\r\n        case \"FETCH_ALL_FILMS_REQUEST\":\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                hasError: false,\r\n            }\r\n        case \"FETCH_ALL_FILMS_FAILURE\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                hasError: true,\r\n            }\r\n        case \"FETCH_ALL_FILMS_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                data: action.payload,\r\n                loading: false,\r\n                hasError: false,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst applyEntityOrCreateNew = (entities, action, params) => {\r\n    const {entity, id} = action.payload;\r\n    const entity_key = [entity, id].join(\"_\");\r\n    const defaultEntity = {\r\n        loading: true,\r\n        hasError: false,\r\n        data: [],\r\n    }\r\n    entities[entity_key] = {\r\n        ...defaultEntity,\r\n        ...entities[entity_key],\r\n        ...params,\r\n    };\r\n\r\n    return entities;\r\n}\r\n\r\nconst entitiesReducer = (state={}, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"FETCH_ENTITY_REQUEST\":\r\n            return applyEntityOrCreateNew(state, action, {loading: true, hasError: false})\r\n        case \"FETCH_ENTITY_SUCCESS\":\r\n            const {data} = action.payload;\r\n            return applyEntityOrCreateNew(state, action, {loading: false, hasError: false, data})\r\n        case \"FETCH_ENTITY_FAILURE\":\r\n            return applyEntityOrCreateNew(state, action, {loading: false, hasError: true})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst reducer = (state = {}, action) => {\r\n    return {\r\n        films: filmsReducer(state.films, action),\r\n        entities: entitiesReducer(state.entities, action)\r\n    }\r\n}\r\n\r\nexport default reducer;","import {createStore} from \"redux\";\r\nimport reducer from \"./reducers\";\r\n\r\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;","export default class SwapiService {\r\n    BASE_URL = \"https://swapi.dev/api/\";\r\n\r\n    getData = async (url) => {\r\n        return fetch(url)\r\n            .then((response) => response.json());\r\n    }\r\n\r\n    getEntity = async (entity, params = {}) => {\r\n        const {id = null, page = null} = params;\r\n        const entityInUrl = entity + \"/\";\r\n        const idInUrl = id ? id + '/' : \"\";\r\n        const pageInUrl = page ? \"?page=\" + page : \"\";\r\n        const api_endpoint = this.BASE_URL + entityInUrl + idInUrl + pageInUrl;\r\n        const answer_data = await this.getData(api_endpoint);\r\n\r\n        return this._resultParser(answer_data);\r\n    };\r\n\r\n    _resultParser = (data) => {\r\n        let result_data;\r\n\r\n        if (data.results) {\r\n            result_data = data.results.map(this._listItemParser);\r\n        } else {\r\n            result_data = this._listItemParser(data);\r\n        }\r\n\r\n        return result_data;\r\n    };\r\n\r\n    _listItemParser = (data) => {\r\n        const data_entries = Object.entries(data)\r\n        const processed_data = data_entries.map(this._singleItemParser)\r\n        return Object.fromEntries(processed_data);\r\n    };\r\n\r\n    _singleItemParser = ([key, value]) => {\r\n        let processed_value;\r\n\r\n        if (value !== null) {\r\n            if (typeof value === 'object') {\r\n                processed_value = value.map(this._processValue);\r\n            } else {\r\n                processed_value = this._processValue(value);\r\n            }\r\n        }\r\n\r\n        return [key, processed_value];\r\n    };\r\n\r\n    _isLink = (test_string) => {\r\n        return test_string.match(/^http(s)?:\\/\\//);\r\n    }\r\n\r\n    _processValue = (value) => {\r\n        if (this._isLink(value.toString())) {\r\n            return this._getTypeAndIdFromURL(value);\r\n        }\r\n\r\n        return value;\r\n    };\r\n\r\n    _getTypeAndIdFromURL(url) {\r\n        const [, entity, , id = null] = url.match(/\\/([a-zA-Z]+)\\/((\\d+)\\/)?$/);\r\n        return {\r\n            entity,\r\n            id,\r\n            type: \"entity\",\r\n        };\r\n    }\r\n}","import React from \"react\";\r\nimport ErrorBanner from \"../error-banner\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    state = {\r\n        hasError: false,\r\n    };\r\n\r\n    static defaultProps = {\r\n        errorBanner: ErrorBanner,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n       this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        const { hasError } = this.state;\r\n        const { errorBanner, children } = this.props;\r\n\r\n        return hasError ? errorBanner : children;\r\n    }\r\n}","import ErrorBoundary from \"./error-boundary\";\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/app\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\nimport {SwapiServiceProvider} from \"./components/films-service-context/films-service-context\";\r\nimport {SwapiService} from \"./services\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ErrorBoundary from \"./components/error-boundary\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ErrorBoundary>\r\n            <SwapiServiceProvider value={new SwapiService()}>\r\n                <App/>\r\n            </SwapiServiceProvider>\r\n        </ErrorBoundary>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}